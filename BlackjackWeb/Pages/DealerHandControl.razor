@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities

<div>
    @foreach (Card card in this.DealerHand.Cards)
    {

        @if (this.DealerHand.Cards.IndexOf(card) == 0 && !_showAllCards)
        {
            //show nothing
        }
        else
        {

            <span>
                @if (card.CardType == CardType.Numeric)
                {
                    @card.Value
                }
                else if (card.CardType == CardType.Jack)
                {
                    @("J")
                }
                else if (card.CardType == CardType.Queen)
                {
                    @("Q")
                }
                else if (card.CardType == CardType.King)
                {
                    @("K")
                }
                else
                {
                    @("A")
                }
                @card.CardSuit.ToString();
            </span>

        }
    }
    <br/>
    <div>
        @_resultMessage
    </div>

</div>


@code {

    [Parameter]
    public GameController GameController { get; set; }

    [Parameter]
    public DealerHand DealerHand { get; set; }

    private string? _resultMessage;

    private bool _showAllCards = false;

    protected override Task OnInitializedAsync()
    {
        DealerHand.OnDealerBust += dealer_onBust;
        DealerHand.OnDealerBlackjack += dealer_onBlackjack;
        DealerHand.OnDealerWinHand += dealer_onWinHand;
        DealerHand.OnDealerLoseHand += dealer_onLoseHand;
        DealerHand.OnPushHand += dealer_onPushHand;
        GameController.OnDealerCardReceived += dealer_onCardReceived;
        GameController.OnGameEnd += GameControllerOnOnGameEnd;
        GameController.OnNewDeal += GameControllerOnOnNewDeal;
        
        StateHasChanged();
        return base.OnInitializedAsync();
    }

    private void GameControllerOnOnNewDeal(object sender, EventArgs e)
    {
        this._resultMessage = string.Empty;
        StateHasChanged();
    }

    private void GameControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _showAllCards = true;
        StateHasChanged();
    }

    private void dealer_onPushHand(Hand hand)
    {
        _resultMessage = "Push";
        StateHasChanged();
    }

    private void dealer_onLoseHand(Hand hand)
    {
        _resultMessage = "Dealer loses with " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onWinHand(Hand hand)
    {
        _resultMessage = "Dealer wins with " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onBust(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "Bust with " + args.Hand.CurrentScore;
        StateHasChanged();
    }

    private void dealer_onBlackjack(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "DEALER BLACKJACK";
        StateHasChanged();
    }

    private void dealer_onCardReceived(object sender, OnCardReceivedEventArgs args)
    {
        StateHasChanged();
    }
}

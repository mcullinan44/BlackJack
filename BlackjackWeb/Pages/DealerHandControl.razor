@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities


<div>
    
  
        @foreach (Card card in this._hand.Cards)
        {
            <span>
                @if (card.CardType == CardType.Numeric)
                {
                    @card.Value
                }
                else if (card.CardType == CardType.Jack)
                {
                    @("J")
                }
                else if (card.CardType == CardType.Queen)
                {
                    @("Q")
                }
                else if (card.CardType == CardType.King)
                {
                    @("K")
                }
                else
                {
                    @("A")
                }
                @card.CardSuit.ToString();

            </span>
        }
        <br/>
        Current Score: @this._hand.CurrentScore;
    
    
    <div>
        @_resultMessage
    </div>

</div>


@code {

    [Parameter] 
    public GameController GameController { get; set; }


    private  DealerHand _hand;

    private string _resultMessage;

    protected override Task OnInitializedAsync()
    {
        _hand = new DealerHand(GameController);

        _hand.OnDealerBust += dealer_onBust;
        _hand.OnDealerBlackjack += dealer_onBlackjack;
        _hand.OnDealerWinHand += hand_onWinHand;
        _hand.OnDealerLoseHand += hand_onLoseHand;
        _hand.OnPushHand += hand_onPushHand;
        GameController.OnDealerCardReceived += dealer_onCardReceived;

        return base.OnInitializedAsync();
    }


    private void hand_onPushHand(Hand hand)
    {
        _resultMessage = "Push";
        StateHasChanged();
    }

    private void hand_onLoseHand(Hand hand)
    {
        _resultMessage = "Dealer loses with " + hand.CurrentScore.ToString();
        StateHasChanged();
        
    }

    private void hand_onWinHand(Hand hand)
    {
        _resultMessage = "Dealer wins with " + hand.CurrentScore.ToString();
        StateHasChanged();
        
    }

    private void dealer_onBust(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "Bust with " + args.Hand.CurrentScore;
        StateHasChanged();
        
    }

    private void dealer_onBlackjack(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "DEALER BLACKJACK";
        StateHasChanged();
        
    }

    private void dealer_onCardReceived(object sender, OnCardReceivedEventArgs args)
    {


        StateHasChanged();


    }
}

@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities

@implements IDisposable

<div>
    
@if (_playing)
{

    @foreach (Card card in this._dealerHand.Cards)
    {

        @if (this._dealerHand.Cards.IndexOf(card) == 0 && !_showAllCards)
        {
            //show nothing
        }
        else
        {

            <span>
                @if (card.CardType == CardType.Numeric)
                {
                    @card.Value
                }
                else if (card.CardType == CardType.Jack)
                {
                    @("J")
                }
                else if (card.CardType == CardType.Queen)
                {
                    @("Q")
                }
                else if (card.CardType == CardType.King)
                {
                    @("K")
                }
                else
                {
                    @("A")
                }
                @card.CardSuit.ToString();
            </span>

        }
    }
    <br/>

}

    <div>
        @_resultMessage
    </div>
</div>


@code {

    private string? _resultMessage;

    private bool _showAllCards = false;

    private DealerHand _dealerHand;

    private GameController _gameController;

    private bool _playing;

    public void Initialize(DealerHand dealerHand,  GameController controller)
    {
        this._dealerHand = dealerHand;
        this._gameController = controller;
        dealerHand.OnDealerBust += dealer_onBust;
        dealerHand.OnDealerBlackjack += dealer_onBlackjack;
        dealerHand.OnDealerWinHand += dealer_onWinHand;
        dealerHand.OnDealerLoseHand += dealer_onLoseHand;
        dealerHand.OnPushHand += dealer_onPushHand;
        dealerHand.OnDealerCardReceived += dealer_onCardReceived;
        _playing = true;
        _gameController.OnGameEnd += GameControllerOnOnGameEnd;
        _gameController.OnNewDeal += GameControllerOnOnNewDeal;

        StateHasChanged();
    }

    private void GameControllerOnOnNewDeal(object sender, EventArgs e)
    {
        this._resultMessage = string.Empty;
        StateHasChanged();
    }

    private void GameControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _showAllCards = true;
        StateHasChanged();
    }

    private void dealer_onPushHand(Hand hand)
    {
        _resultMessage = "Push";
        StateHasChanged();
    }

    private void dealer_onLoseHand(Hand hand)
    {
        _resultMessage = "Dealer loses with " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onWinHand(Hand hand)
    {
        _resultMessage = "Dealer wins with " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onBust(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "DEALER BUSTS with " + args.Hand.CurrentScore;
        StateHasChanged();
    }

    private void dealer_onBlackjack(object sender, OnCardReceivedEventArgs args)
    {
        _showAllCards = true;
        _resultMessage = "DEALER BLACKJACK";
        StateHasChanged();
    }

    private void dealer_onCardReceived(object sender, OnCardReceivedEventArgs args)
    {
        StateHasChanged();
    }


    public void Dispose()
    {
        _dealerHand.OnDealerBust += dealer_onBust;
        _dealerHand.OnDealerBlackjack += dealer_onBlackjack;
        _dealerHand.OnDealerWinHand += dealer_onWinHand;
        _dealerHand.OnDealerLoseHand += dealer_onLoseHand;
        _dealerHand.OnPushHand += dealer_onPushHand;
        _dealerHand.OnDealerCardReceived += dealer_onCardReceived;
        _gameController.OnNewDeal -= GameControllerOnOnNewDeal;
        _gameController.OnGameEnd -= GameControllerOnOnGameEnd;
    }
}

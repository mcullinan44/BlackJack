@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@implements IDisposable

<img @ref="_spritesheet" hidden src="images/cards.png" />
<div>
    <strong>@_resultMessage</strong>
</div>
<BECanvas Width="500" Height="200" @ref="_canvas"></BECanvas>


@code {

    private string _resultMessage = "";
    private DealerHand _dealerHand;
    private GameController _gameController;
    BECanvasComponent _canvas;
    Canvas2DContext _context;
    ElementReference _spritesheet;
    CardGraphicsHelper _graphicsHelper;

    public void Initialize(DealerHand dealerHand,  GameController controller)
    {
        this._dealerHand = dealerHand;
        this._gameController = controller;

        dealerHand.OnDealerBust += dealer_onBust;
        dealerHand.OnDealerBlackjack += dealer_onBlackjack;
        dealerHand.OnDealerWinHand += dealer_onWinHand;
        dealerHand.OnDealerLoseHand += dealer_onLoseHand;
        dealerHand.OnPushHand += dealer_onPushHand;
        dealerHand.OnDealerCardReceived += dealer_onCardReceived;
        _gameController.OnGameEnd += GameControllerOnOnGameEnd;
        _gameController.OnNewDeal += GameControllerOnOnNewDeal;

        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_canvas != null && _context == null)
        {
            _context = await _canvas.CreateCanvas2DAsync();
            this._graphicsHelper = new CardGraphicsHelper(_spritesheet, _context, _canvas);
        }
    }

    private void GameControllerOnOnNewDeal(object sender, EventArgs e)
    {
        this._resultMessage = "    ";
        _ = _graphicsHelper.ClearCanvas();
        StateHasChanged();
    }

    private void GameControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _ = _graphicsHelper.RevealAll(_dealerHand);
        StateHasChanged();
    }

    private void dealer_onPushHand(Hand hand)
    {
        _resultMessage = "PUSH";
        StateHasChanged();
    }

    private void dealer_onLoseHand(Hand hand)
    {
        _resultMessage = "DEALER LOSES WITH " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onWinHand(Hand hand)
    {
        _resultMessage = "DEALER WINS WITH " + hand.CurrentScore.ToString();
        StateHasChanged();
    }

    private void dealer_onBust(object sender, CardReceivedEventArgs args)
    {
        _resultMessage = "DEALER BUSTS WITH " + args.Hand.CurrentScore;
        StateHasChanged();
    }

    private void dealer_onBlackjack(object sender, CardReceivedEventArgs args)
    {
        _resultMessage = "DEALER BLACKJACK";
        StateHasChanged();
    }

    private void dealer_onCardReceived(object sender, CardReceivedEventArgs args)
    {
        if(_dealerHand.CardCount == 1)
        {
            _ = _graphicsHelper.DealHoleCard(_dealerHand);
        }
        else
        {
            _ = _graphicsHelper.DealCardFaceUp(args.Card, _dealerHand);
        }
    }

    public void Dispose()
    {
        if(_dealerHand != null)
        {
            _dealerHand.OnDealerBust -= dealer_onBust;
            _dealerHand.OnDealerBlackjack -= dealer_onBlackjack;
            _dealerHand.OnDealerWinHand -= dealer_onWinHand;
            _dealerHand.OnDealerLoseHand -= dealer_onLoseHand;
            _dealerHand.OnPushHand -= dealer_onPushHand;
            _dealerHand.OnDealerCardReceived -= dealer_onCardReceived;    
        }

        if(_gameController != null)
        {
            _gameController.OnNewDeal -= GameControllerOnOnNewDeal;
            _gameController.OnGameEnd -= GameControllerOnOnGameEnd;
        }
    }
}

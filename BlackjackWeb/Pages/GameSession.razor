@using Microsoft.AspNetCore.Components
@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities
<br />
<br />
<div>
    Dealer Hand:
    <DealerHandControl GameController="Controller"></DealerHandControl>
</div>
|-------------------------------------------------------------------------------------------------------------|
<br />
<br />
<br />
<br />
<br />
|-------------------------------------------------------------------------------------------------------------|
<br />

<div>
    <div>Current Bet: @_totalBet.ToString("c0")</div>
    @if (_ready)
    {
        <PlayerHandControl @ref="_playerHandControl" GameController="Controller" Player="Player" PlayerHand="_playerHand" Bet="_totalBet"></PlayerHandControl>
    }
    <br />
    <br />
    <br />
    <br />
    <div>
        Bet Amount: <input type="text" @bind="@_betIncrement" /> <button @onclick="IncreaseBet">IncreaseBet</button>
        <br/>saw
        <button @onclick="Deal">Deal</button>
    </div>

    Bankroll: $<p>@_bankroll</p>
</div>
@code {

    [Parameter]
    public  GameController Controller { get; set; }

    [Parameter]
    public  Player Player { get; set; }

    private PlayerHand _playerHand;

    private PlayerHandControl _playerHandControl;

    private int _betIncrement;
    private int _totalBet;

    private string _bankroll;

    private bool _ready;

    protected override Task OnInitializedAsync()
    {
        Controller.OnBankrollChange += ControllerOnOnBankrollChange;
        Controller.OnShowAllCards += ControllerOnOnShowAllCards;
        Controller.OnGameEnd += ControllerOnOnGameEnd;
        Controller.MinimumBet = Defaults.MINIMUM_BET;
        Controller.ShuffleAll();
        _betIncrement = Controller.MinimumBet;
        _bankroll = "1000";
        return base.OnInitializedAsync(); 
    }

    private void ControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _playerHandControl = null;
        _totalBet = 0;
        StateHasChanged();
    }

    private void ControllerOnOnShowAllCards(object sender, EventArgs e)
    {

    }

    private void ControllerOnOnBankrollChange(object sender, OnBankrollChangedEventArgs e)
    {
        _bankroll = e.Player.PlayerbankRoll.ToString("c0");
        StateHasChanged();
    }


    private void Instance_OnShowAllCards(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void IncreaseBet(MouseEventArgs obj)
    {
        _totalBet += _betIncrement;
        Controller.AdjustPlayerBankroll(Player, -_betIncrement);

        StateHasChanged();

    }

    public void SplitHand()
    {
        //    PlayerHandControl newPlayerHandControl = new PlayerHandControl(_controller.ActivePlayer, _controller, this, State.NotYetPlayed);
        //    _playerHandControlList.Add(newPlayerHandControl);
        //    newPlayerHandControl.Visible = true;
        //    _playerLayoutPanel.Controls.Add(newPlayerHandControl);

        //    _controller.SeedSplitHandWithNewCard(newPlayerHandControl.PlayerHand);
        //    _controller.RemoveCardForSplitFromActivePlayerHand();
        //    _controller.IncreaseBet(newPlayerHandControl.PlayerHand, double.Parse(_bet.ToString()));

        //    newPlayerHandControl.DeactivateButtons();
        ////add another card to first hand
        //    _controller.GivePlayerNextCardInShoe(_controller.ActivePlayer.ActiveHand, true);
        ////add another card to last hand
        //    _controller.GivePlayerNextCardInShoe(newPlayerHandControl.PlayerHand, true);
    }


    private void HandOnOnDealerBust(object sender, OnCardReceivedEventArgs args)
    {

    }

    private void HandOnOnDealerBlackjack(object sender, OnCardReceivedEventArgs args)
    {

    }

    private void Deal()
    {

        Player.IsActive = true;
        _playerHand = Controller.AddHandToPlayer(Player, State.Playing, _totalBet);
        Controller.Dealer.Hand.OnDealerBlackjack += HandOnOnDealerBlackjack;
        Controller.Dealer.Hand.OnDealerBust += HandOnOnDealerBust;
        Controller.DealAsync();
        _ready = true;
    }
}

@using Microsoft.AspNetCore.Components
@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities
@using Microsoft.AspNetCore.Mvc

@if (_ready)
{
      <div style="font-size: 36px;">Bankroll: @_bankroll</div>
      <div id="canvasContainerDealer" style="position: fixed; border-style: groove; width: 500px; height: 200px;">
        <DynamicComponent Type="typeof(DealerHandControl)"  @ref="_dynamicDealerHandControl"> </DynamicComponent>
    </div>
                <br />
                <br />
                <br />
                <br />
                <br />
                <br/>
                <br/>
                <br/>
                <br/>
                <br />


          <div id="canvasContainer" style="position: fixed; border-style: groove; width: 500px; height: 200px;">
           <DynamicComponent Type="typeof(PlayerHandControl)" @ref="_dynamicPlayerHandControl"> </DynamicComponent>
       </div>
                <br />
                <br />
                <br />
                <br />
                <br />
                <br />
                <br/>
                <br/>
                <br/>
                <br/>
                <br />
           Amount: <input type="text" @bind="@_betIncrement" /> 
           @if (_canIncreaseBet)
            {
                <button @onclick="IncreaseBet">Place Bet</button>
            }
            <br/>

            @if (_canDeal)
            {
                <button @onclick="Deal">Deal</button>
            }
        
    

}

@code {

    private Player _player; 
    private PlayerHand _playerHand;
    private DealerHand _dealerHand;
    public GameController _controller;
    private DynamicComponent _dynamicPlayerHandControl;
    private DynamicComponent _dynamicDealerHandControl;

    private string _playerHandId;

    private int _betIncrement;

    private int _totalBet;

    private bool _canDeal = false;

    private bool _canIncreaseBet = false;

    private string _bankroll;

    private bool _ready;

    public void Initialize(GameController controller, Player player)
    {
        this._controller = controller;
        this._player = player;
        _controller.OnBankrollChange += ControllerOnOnBankrollChange;
        _controller.OnGameEnd += ControllerOnOnGameEnd;
        _controller.MinimumBet = Defaults.MINIMUM_BET;
        _controller.ShuffleAll();
        _betIncrement = controller.MinimumBet;
        _bankroll = "1000";
        _ready = true;
        _canIncreaseBet = true;

        StateHasChanged();
    }

    private void ControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _totalBet = 0;
        _canDeal = false;
        _canIncreaseBet = true;
        ((DealerHandControl)_dynamicDealerHandControl.Instance).Dispose();
        ((PlayerHandControl)_dynamicPlayerHandControl.Instance).Dispose();
        StateHasChanged();
    }


    private void ControllerOnOnBankrollChange(object sender, OnBankrollChangedEventArgs e)
    {
        _bankroll = e.Player.PlayerbankRoll.ToString("c0");
        StateHasChanged();
    }


    private void IncreaseBet(MouseEventArgs obj)
    {
        _totalBet += _betIncrement;
        _canDeal = true;
        _controller.AdjustPlayerBankroll(_player, -_betIncrement);
        _controller.IncreaseBet(_playerHand, _betIncrement);
        StateHasChanged();
    }

    public void SplitHand()
    {
        //    PlayerHandControl newPlayerHandControl = new PlayerHandControl(_controller.ActivePlayer, _controller, this, State.NotYetPlayed);
        //    _playerHandControlList.Add(newPlayerHandControl);
        //    newPlayerHandControl.Visible = true;
        //    _playerLayoutPanel.Controls.Add(newPlayerHandControl);

        //    _controller.SeedSplitHandWithNewCard(newPlayerHandControl.PlayerHand);
        //    _controller.RemoveCardForSplitFromActivePlayerHand();
        //    _controller.IncreaseBet(newPlayerHandControl.PlayerHand, double.Parse(_bet.ToString()));

        //    newPlayerHandControl.DeactivateButtons();
        ////add another card to first hand
        //    _controller.GivePlayerNextCardInShoe(_controller.ActivePlayer.ActiveHand, true);
        ////add another card to last hand
        //    _controller.GivePlayerNextCardInShoe(newPlayerHandControl.PlayerHand, true);
    }


    private async Task Deal()
    {

        _player.IsActive = true;
        _playerHand = _controller.AddHandToPlayer(_player, State.Playing, _totalBet);
        _dealerHand = _controller.AddDealerHandToDealer();

        ((PlayerHandControl)_dynamicPlayerHandControl.Instance).Initialize(_playerHand, _totalBet, _controller);
        ((DealerHandControl)_dynamicDealerHandControl.Instance).Initialize(_dealerHand, _controller);

        StateHasChanged();

        _canIncreaseBet = false;
        _canDeal = false;
        await _controller.DealAsync();


        StateHasChanged();
    }


    public void Dispose()
    {

        if (_controller != null)
        {
            _controller.OnBankrollChange -= ControllerOnOnBankrollChange;
            _controller.OnGameEnd -= ControllerOnOnGameEnd;
        }
        StateHasChanged();

        _ready = false;
    }
}

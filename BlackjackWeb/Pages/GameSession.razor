@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities

@if (_ready)
{
    <div class="game-board">
        <div class="bankroll">
            <div style="font-size: 24px;">Funds:<br /> @_bankroll</div>    
        </div>
        <div id="canvasContainerDealer" style="border-style: none; " class="flex-item">
            <DynamicComponent Type="typeof(DealerHandControl)" @ref="_dynamicDealerHandControl"> </DynamicComponent>
        </div>
        <div id="canvasContainer" style="border-style: none;" class="flex-item">
            <DynamicComponent Type="typeof(PlayerHandControl)" @ref="_dynamicPlayerHandControl"> </DynamicComponent>
        </div>
        <div class="flex-item">
            <div class="hand-input-container">
                <div class="hand-input-item2 player-hand-start-bet-container">
                    <div class="bet-incremenet-container" style="display: @(_canIncreaseBet ? "": "none")">
                        <button class="button-action" @onclick="(() => this.IncreaseBet(5))">$10</button>
                        <button class="button-action" @onclick="(() => this.IncreaseBet(10))">$25</button>
                        <button class="button-action" @onclick="(() => this.IncreaseBet(25))">$50</button>
                        <button class="button-action" @onclick="(() => this.IncreaseBet(50))">$100</button>
                    </div>
                    <button @onclick="Deal" class="button-deal" style="display: @(_canDeal ? "block": "none")">Deal</button>
                </div>
            </div>
        </div>
        <div class="flex-item">
            <DynamicComponent Type="typeof(BetControl)" @ref="_dynamicBetControl"></DynamicComponent>
        </div>
    </div>
}

@code {

    private Player _player; 
    private PlayerHand _playerHand;
    private Bet _bet;
    private DealerHand _dealerHand;
    private GameController _controller;
    private DynamicComponent _dynamicPlayerHandControl;
    private DynamicComponent _dynamicDealerHandControl;
    private DynamicComponent _dynamicBetControl;
    private string _bankroll;
    private bool _canDeal;
    private bool _canIncreaseBet;
    private bool _ready;

    public void Initialize(GameController controller, Player player)
    {
        this._controller = controller;
        this._player = player;
        _controller.OnBankrollChange += ControllerOnOnBankrollChange;
        _controller.OnGameEnd += ControllerOnOnGameEnd;
        _controller.MinimumBet = Defaults.MINIMUM_BET;
        _controller.ShuffleAll();
        _bankroll = "$1000";
        _ready = true;
        _canIncreaseBet = true;

        StateHasChanged();
    }

    private void ControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _canDeal = false;
        _canIncreaseBet = true;
        ((DealerHandControl)_dynamicDealerHandControl.Instance)?.Dispose();
        ((PlayerHandControl)_dynamicPlayerHandControl.Instance)?.Dispose();
        ((BetControl)_dynamicBetControl.Instance)?.Dispose();
        _bet = null;

        StateHasChanged();
    }


    private void ControllerOnOnBankrollChange(object sender, BankrollChangedEventArgs e)
    {
        _bankroll = e.Player.PlayerbankRoll.ToString("c0");
        StateHasChanged();
    }


    private void IncreaseBet(int amount)
    {
        if (_bet == null)
        {
            _bet = new Bet(Guid.NewGuid());
            ((BetControl)_dynamicBetControl.Instance)?.Initialize(_bet, _controller);

        }
        _bet.IncreaseBase(amount);
        _canDeal = true;
        _controller.AdjustPlayerBankroll(_player, -amount);
        StateHasChanged();

    }

    public void SplitHand()
    {
        //    PlayerHandControl newPlayerHandControl = new PlayerHandControl(_controller.ActivePlayer, _controller, this, State.NotYetPlayed);
        //    _playerHandControlList.Add(newPlayerHandControl);
        //    newPlayerHandControl.Visible = true;
        //    _playerLayoutPanel.Controls.Add(newPlayerHandControl);

        //    _controller.SeedSplitHandWithNewCard(newPlayerHandControl.PlayerHand);
        //    _controller.RemoveCardForSplitFromActivePlayerHand();
        //    _controller.IncreaseBet(newPlayerHandControl.PlayerHand, double.Parse(_bet.ToString()));

        //    newPlayerHandControl.DeactivateButtons();
        ////add another card to first hand
        //    _controller.GivePlayerNextCardInShoe(_controller.ActivePlayer.ActiveHand, true);
        ////add another card to last hand
        //    _controller.GivePlayerNextCardInShoe(newPlayerHandControl.PlayerHand, true);
    }


    private async Task Deal()
    {
        _player.IsActive = true;
        _playerHand = _controller.AddHandToPlayer(_player, State.Playing, _bet);
        _dealerHand = _controller.AddDealerHandToDealer();
        ((PlayerHandControl)_dynamicPlayerHandControl.Instance)?.Initialize(_playerHand,  _controller);
        ((DealerHandControl)_dynamicDealerHandControl.Instance)?.Initialize(_dealerHand, _controller);

        StateHasChanged();
        _canIncreaseBet = false;
        _canDeal = false;
        await _controller.DealAsync();
        StateHasChanged();
    }


    public void Dispose()
    {
        if (_controller != null)
        {
            _controller.OnBankrollChange -= ControllerOnOnBankrollChange;
            _controller.OnGameEnd -= ControllerOnOnGameEnd;
        }
        StateHasChanged();
        _ready = false;
    }
}


@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities
@using Microsoft.AspNetCore.DataProtection.XmlEncryption
@using System.Xml
@using System.Net.Mime
@using System.Diagnostics.Eventing.Reader


@if (_dataLoaded)
{
    <div>
        Hand Bet: <label>@_bet.ToString("c0")</label>
    </div>
    <div>
        @foreach (Card card in this._playerHand.Cards)
        {
            <span>
                @if (card.CardType == CardType.Numeric)
                {
                    @card.Value
                }
                else if (card.CardType == CardType.Jack)
                {
                    @("J")
                }
                else if (card.CardType == CardType.Queen)
                {
                    @("Q")
                }
                else if (card.CardType == CardType.King)
                {
                    @("K")
                }
                else
                {
                    @("A")
                }
                @card.CardSuit.ToString().TrimEnd(';');

            </span>
        }
        <br/>
        Score: @this._playerHand.CurrentScore;
    </div>


    <div>

        @if (_hittable)
        {
            <button @onclick="OnHit">Hit</button>
        }

        @if (_standable)
        {
            <button @onclick="OnStand">Stand</button>

        }

        @if (_doubleable)
        {
            <button @onclick="OnDouble">Double</button>
        }

        @if (_splitable)
        {
            <button @onclick="OnSplit">Split</button>
        }
    </div>
    <div>
        <div>
            @_resultMessage
        </div>

        @if (_winningAmount > 0)
        {
            <div>

            </div>
        }

    </div>
}
@code {



    private bool _hittable;

    private bool _standable;

    private bool _doubleable;

    private bool _splitable;

    private string _resultMessage;

    private double _winningAmount;

    private bool _hasblackjack;



    private bool _dataLoaded;


    private PlayerHand _playerHand;

    private int _bet;

    private GameController _gameController;

    public void Initialize(PlayerHand playerHand, int bet, GameController controller)
    {
        this._playerHand = playerHand;
        this._bet = bet;
        this._gameController = controller;

        _playerHand.OnBetChanged +=  PlayerHandOnOnBetChanged;
        _playerHand.OnCardReceived += PlayerHandOnOnCardReceived;
        _playerHand.OnBust += PlayerHandOnOnBust;
        _playerHand.OnBlackjack += PlayerHandOnOnBlackjack;
        _playerHand.OnWinHand += PlayerHandOnOnWinHand;
        _playerHand.OnLoseHand += PlayerHandOnOnLoseHand;
        _playerHand.OnPushHand += PlayerHandOnOnPushHand;
        _playerHand.OnActivate += PlayerHandOnOnActivate;
        _playerHand.OnTakeCardForSplit += PlayerHandOnOnTakeCardForSplit;
        _gameController.OnGameEnd += GameControllerOnOnGameEnd;
        _dataLoaded = true;
        _resultMessage = string.Empty;
        StateHasChanged();
    }

    private void GameControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _doubleable = _hittable = _standable = _splitable = false;
        StateHasChanged();
    }

    private void PlayerHandOnOnTakeCardForSplit(object sender, OnCardRemovedForSplitEventArgs e)
    {
       

    }

    private void PlayerHandOnOnActivate(object sender, EventArgs e)
    {
        ActivateButtons();
        StateHasChanged();
    }

    private void PlayerHandOnOnPushHand(Hand hand)
    {
        _resultMessage = "Push with " + hand.CurrentScore;
        StateHasChanged();
    }

    private void PlayerHandOnOnLoseHand(Hand hand)
    {
        _resultMessage = "Hand loses " + ((PlayerHand)hand).CurrentBet.Amount.ToString("c0") + " with score of " + hand.CurrentScore;
        StateHasChanged();
   
    }

    private void PlayerHandOnOnWinHand(Hand hand)
    {
        _resultMessage = "Hand wins " + ((PlayerHand)hand).CurrentBet.Amount.ToString("c0") + " with score of " + hand.CurrentScore + ". Dealer has " + _gameController.Dealer.Hand.CurrentScore;
        StateHasChanged();
    }

    private void PlayerHandOnOnBlackjack(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "BLACKJACK!!!! You win " + (_playerHand.CurrentBet.Amount * 1.5).ToString("c0");
        StateHasChanged();
    }

    private void PlayerHandOnOnBust(object sender, OnCardReceivedEventArgs args)
    {
        _resultMessage = "YOU BUST!! " + args.Hand.CurrentScore + ". " + "Lost " + ((PlayerHand)args.Hand).CurrentBet.Amount.ToString("c0");
        StateHasChanged();
        
    }

    private void PlayerHandOnOnCardReceived(object sender, OnCardReceivedEventArgs args)
    {
        if(_playerHand.State == State.Playing)
        {
            ActivateButtons();
        }
        StateHasChanged();
    }

    private void PlayerHandOnOnBetChanged(object sender, OnBetChangedEventArgs args)
    {
        _bet = args.Bet.Amount;
        StateHasChanged();
        
    }

    private void OnHit(MouseEventArgs obj)
    {
        _playerHand.Hit();
        StateHasChanged();
 
    }

    private void OnStand(MouseEventArgs obj)
    {
        _playerHand.Stand();
        StateHasChanged();
    }

    private void OnSplit(MouseEventArgs obj)
    {
     

    }

    private void OnDouble(MouseEventArgs obj)
    {
        _playerHand.DoubleDown();
        DisableButtons();
        StateHasChanged();

    }

    private void DisableButtons()
    {
        _hittable = _standable = _splitable = _doubleable = false;
        StateHasChanged();
    }

    private void ActivateButtons()
    {
        _hittable = true;
        _standable = true;
    //can't split more than two times.
        if(_gameController.ActivePlayer.CurrentHands.Count == 3)
        {
            _splitable = false;
            
        }
        if (_playerHand.Cards.Count == 2)
        {
            if (_playerHand.Cards[0].CardType == _playerHand.Cards[1].CardType
                && _playerHand.Cards[0].Value == _playerHand.Cards[1].Value)
            {
                _splitable = true;
                
            }
            _doubleable = true;
        }
        else
        {
            _doubleable = _splitable = false;
        }
        StateHasChanged();
    }

    public void DeactivateButtons()
    {
        _hittable = _splitable = _standable = _doubleable =  false;
    }
}

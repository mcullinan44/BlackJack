@using Blackjack.Core
@using BlackJack.Core
@using Blackjack.Core.Entities
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D

@implements IDisposable

<img @ref="_spritesheet" hidden src="images/cards.png" />
<BECanvas Width="500" Height="200" @ref="_canvas"></BECanvas>
    <div class="player-hand-action-container">
    @if (_hittable)
    {
        <button class="button-action" @onclick="OnHit">Hit</button>
    }

    @if (_standable)
    {
            <button class="button-action" @onclick="OnStand">Stand</button>

    }

    @if (_doubleable)
    {
            <button class="button-action" @onclick="OnDouble">Double</button>
    }
    
    </div>
<div class="result">
    <strong class="message">@_resultMessage</strong>
</div>
@code {

    private PlayerHand _playerHand;
    private GameController _gameController;

    BECanvasComponent _canvas;
    Canvas2DContext _context;
    ElementReference _spritesheet;
    CardGraphicsHelper _graphicsHelper;

    private bool _hittable;
    private bool _standable;
    private bool _doubleable;
    private string _resultMessage;
 

    public void Initialize(PlayerHand playerHand, GameController controller)
    {
        this._playerHand = playerHand;
        this._gameController = controller;
        _playerHand.OnCardReceived += PlayerHandOnOnCardReceived;
        _playerHand.OnBust += PlayerHandOnOnBust;
        _playerHand.OnBlackjack += PlayerHandOnOnBlackjack;
        _playerHand.OnWinHand += PlayerHandOnOnWinHand;
        _playerHand.OnLoseHand += PlayerHandOnOnLoseHand;
        _playerHand.OnPushHand += PlayerHandOnOnPushHand;
        _playerHand.OnActivate += PlayerHandOnOnActivate;
        _playerHand.OnTakeCardForSplit += PlayerHandOnOnTakeCardForSplit;
        _gameController.OnNewDeal += GameControllerOnOnNewDeal;
        _gameController.OnGameEnd += GameControllerOnOnGameEnd;
        _resultMessage = string.Empty;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(_canvas != null && _context == null)
        {
            _context = await _canvas.CreateCanvas2DAsync();
            this._graphicsHelper = new CardGraphicsHelper(_spritesheet, _context, _canvas);
        }
    }

    private void GameControllerOnOnNewDeal(object sender, EventArgs e)
    {
        this._resultMessage = string.Empty;
        _ = _graphicsHelper.ClearCanvas();
        StateHasChanged();
    }

    private void GameControllerOnOnGameEnd(object sender, EventArgs e)
    {
        _doubleable = _hittable = _standable = false;
        this._playerHand.Cards.Clear();
        StateHasChanged();
    }

    private void PlayerHandOnOnTakeCardForSplit(object sender, CardRemovedForSplitEventArgs e)
    {

    }

    private void PlayerHandOnOnActivate(object sender, EventArgs e)
    {
        ActivateButtons();
        StateHasChanged();
    }

    private void PlayerHandOnOnPushHand(Hand hand)
    {
        _resultMessage = "PUSH WITH " + hand.CurrentScore;
        StateHasChanged();
    }

    private void PlayerHandOnOnLoseHand(Hand hand)
    {
        _resultMessage = "PLAYER LOSES " + ((PlayerHand)hand).CurrentBet.Amount.ToString("c0") + " WITH " + hand.CurrentScore + ".";
        StateHasChanged();

    }

    private void PlayerHandOnOnWinHand(Hand hand)
    {
        _resultMessage = "PLAYER WINS " + ((PlayerHand)hand).CurrentBet.Amount.ToString("c0") + " WITH " + hand.CurrentScore + ".";
        StateHasChanged();
    }

    private void PlayerHandOnOnBlackjack(object sender, CardReceivedEventArgs args)
    {
        _resultMessage = "BLACKJACK!!!! YOU WIN " + (_playerHand.CurrentBet.Amount * 1.5).ToString("c0");
        StateHasChanged();
    }

    private void PlayerHandOnOnBust(object sender, CardReceivedEventArgs args)
    {
        _resultMessage = "PLAYER BUSTS WITH " + args.Hand.CurrentScore + ". " + "LOSES " + ((PlayerHand)args.Hand).CurrentBet.Amount.ToString("c0");
        StateHasChanged();
    }


    private void PlayerHandOnOnCardReceived(object sender, CardReceivedEventArgs args)
    {
        if(_playerHand.State == State.Playing)
        {
            ActivateButtons();
        }
        _ = _graphicsHelper.DealCardFaceUp(args.Card, _playerHand);
    }

    private void OnHit(MouseEventArgs obj)
    {
        _playerHand.Hit();
        StateHasChanged();
    }

    private void OnStand(MouseEventArgs obj)
    {
        _playerHand.Stand();
        StateHasChanged();
    }

    private void OnDouble(MouseEventArgs obj)
    {
        _playerHand.DoubleDown();
        DisableButtons();
        StateHasChanged();
    }

    private void DisableButtons()
    {
        _hittable = _standable = _doubleable = false;
        StateHasChanged();
    }

    private void ActivateButtons()
    {
        _hittable = true;
        _standable = true;
        //can't split more than two times.
        if(_gameController.ActivePlayer.CurrentHands.Count == 3)
        {
            //_splitable = false;
        }
        if (_playerHand.Cards.Count == 2)
        {
            if (_playerHand.Cards[0].CardType == _playerHand.Cards[1].CardType
                && _playerHand.Cards[0].Value == _playerHand.Cards[1].Value)
            {
                //_splitable = true;

            }
            _doubleable = true;
        }
        else
        {
            _doubleable =  false;
        }
        StateHasChanged();
    }

    public void DeactivateButtons()
    {
        _hittable = _standable = _doubleable =  false;
    }

    public void Dispose()
    {
        if (_playerHand != null)
        {
            _playerHand.OnCardReceived -= PlayerHandOnOnCardReceived;
            _playerHand.OnBust -= PlayerHandOnOnBust;
            _playerHand.OnBlackjack -= PlayerHandOnOnBlackjack;
            _playerHand.OnWinHand -= PlayerHandOnOnWinHand;
            _playerHand.OnLoseHand -= PlayerHandOnOnLoseHand;
            _playerHand.OnPushHand -= PlayerHandOnOnPushHand;
            _playerHand.OnActivate -= PlayerHandOnOnActivate;
            _playerHand.OnTakeCardForSplit -= PlayerHandOnOnTakeCardForSplit;
        }

        if (_gameController != null)
        {
            _gameController.OnNewDeal -= GameControllerOnOnNewDeal;
            _gameController.OnGameEnd -= GameControllerOnOnGameEnd;
        }
    }
}
